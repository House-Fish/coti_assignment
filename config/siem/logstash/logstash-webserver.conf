filter {
  if [log_type] == "webserver" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level}: %{GREEDYDATA:log_message} \[%{GREEDYDATA:trash}\]" }
    }

    grok {
      match => {
        "log_message" => [
          "Product viewed: %{GREEDYDATA:product_name}",
          "New review added for product %{NUMBER:product_id}: %{GREEDYDATA:review_content}",
          "Image uploaded for product %{NUMBER:product_id}: %{GREEDYDATA:image_path}: md5sum: %{WORD:md5sum}",
          "Product %{NUMBER:product_id} added to cart by user %{WORD:username}",
          "Homepage accessed",
          "User %{WORD:username} logged in successfully",
          "Failed login attempt for username: %{WORD:username}",
          "New user registered: %{WORD:username}",
          "Payment successful for order %{BASE10NUM:order_id} amount: \$%{NUMBER:amount:float}, user: %{WORD:username}",
          "Invalid card details provided for order: %{BASE10NUM:order_id} amount: \$%{NUMBER:amount:float} for username: %{GREEDYDATA:username}",
          "Potential web scraper - %{GREEDYDATA:reason}"
        ]
      }
      tag_on_failure => ["_grokparsefailure"]
    }

    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
      target => "@timestamp"
    }

    mutate {
      convert => {
        "product_id" => "integer"
      }
      remove_field => [ "trash" ]
    }
  }
}

output {
  if [log_type] == "webserver" {
    opensearch {
        hosts => ["https://localhost:9200"]
        index => "webserver-logs-%{+YYYY.MM.dd}"
        user => "admin"
        password => "st1ong.Passw0r"
        ssl => true
        ssl_certificate_verification => false
    }
  }
}
