filter {
  if [log_type] == "mail" {
    grok {
      pattern_definitions => {
        "AMAVIS_QUEUEID" => "(?:[0-9A-F]{6,}|[0-9a-zA-Z]{15,})"
        "AMAVIS_STATUS" => "(?:Passed|Blocked)"
        "AMAVIS_ORIGINATING" => "(?:ORIGINATING|ORIGINATING_POST)(?:/MYNETS)?"
        "AMAVIS_RESULT_LINE" => "\(%{DATA:amavis_thread}\) %{AMAVIS_STATUS:amavis_status} %{DATA:amavis_result} \{%{DATA:amavis_actions}\}, \[%{IP:amavis_relay_ip}\]:%{POSINT:amavis_relay_port} <%{DATA:amavis_sender}> -> <%{DATA:amavis_recipient}>, Queue-ID: %{AMAVIS_QUEUEID:amavis_queueid}, Message-ID: <%{DATA:amavis_message-id}>, mail_id: %{DATA:amavis_mail_id}, Hits: %{NUMBER:amavis_hits}, size: %{NUMBER:amavis_size}, queued_as: %{AMAVIS_QUEUEID:amavis_queued_as}, %{NUMBER:amavis_delay} ms"
        "AMAVIS_QUEUE_LINE" => "\(%{DATA:amavis_thread}\) %{DATA:amavis_mail_id} FWD from <%{DATA:amavis_sender}> -> <%{DATA:amavis_recipient}>, BODY=%{WORD:amavis_body} 250 2\.0\.0 from MTA\(smtp:\[%{IP:amavis_mta_ip}\]:%{POSINT:amavis_mta_port}\): 250 2\.0\.0 Ok: queued as %{AMAVIS_QUEUEID:amavis_queued_as}"
        "AMAVIS_TIMING_LINE" => "\(%{DATA:amavis_thread}\) (?:size: %{NUMBER:amavis_size}, )?TIMING \[total %{NUMBER:amavis_total_time} ms\] - %{GREEDYDATA:amavis_timing_details}"
        "AMAVIS_SA_TIMING_LINE" => "\(%{DATA:amavis_thread}\) TIMING-SA total %{NUMBER:amavis_sa_total_time} ms - %{GREEDYDATA:amavis_sa_timing_details}"
      }
      
      match => {
        "message" => [
          "%{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} amavis\[%{POSINT:amavis_pid}\]: %{AMAVIS_RESULT_LINE}",
          "%{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} amavis\[%{POSINT:amavis_pid}\]: %{AMAVIS_QUEUE_LINE}",
          "%{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} amavis\[%{POSINT:amavis_pid}\]: %{AMAVIS_TIMING_LINE}",
          "%{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} amavis\[%{POSINT:amavis_pid}\]: %{AMAVIS_SA_TIMING_LINE}"
        ]
      }
      tag_on_failure => ["_grokparsefailure"]
      break_on_match => true
    }

    if "_grokparsefailure" not in [tags] {
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }

      mutate {
        convert => {
          "amavis_size" => "integer"
          "amavis_hits" => "float"
          "amavis_delay" => "integer"
          "amavis_relay_port" => "integer"
          "amavis_mta_port" => "integer"
          "amavis_total_time" => "float"
          "amavis_sa_total_time" => "float"
          "amavis_pid" => "integer"
        }
        add_field => {
          "[event][dataset]" => "amavis"
          "[event][module]" => "mail"
          "[event][type]" => "virus_scan"
        }
      }

      if [amavis_timing_details] {
        ruby {
          code => '
            timings = {}
            event.get("amavis_timing_details").scan(/(\w+(?:(?:-|_)\w+)*): ([\d.]+)(?: \(([^\)]+)\))?/) do |name, time, percentage|
              timings[name] = {
                "time" => time.to_f,
                "percentage" => percentage ? percentage.to_f : nil
              }
            end
            event.set("amavis_timing_parsed", timings)
          '
        }
      }

      if [amavis_sa_timing_details] {
        ruby {
          code => '
            timings = {}
            event.get("amavis_sa_timing_details").scan(/(\w+(?:(?:-|_)\w+)*): ([\d.]+)(?: \(([^\)]+)\))?/) do |name, time, percentage|
              timings[name] = {
                "time" => time.to_f,
                "percentage" => percentage ? percentage.gsub("%", "").to_f : nil
              }
            end
            event.set("amavis_sa_timing_parsed", timings)
          '
        }
      }
    }
  }
}

output {
    if [log_type] == "mail" {
      opensearch {
          hosts => ["https://localhost:9200"]
          index => "mail-alerts-%{+YYYY.MM.dd}"
          user => "admin"
          password => "st1ong.Passw0r"
          ssl => true
          ssl_certificate_verification => false
      }
  }
}
